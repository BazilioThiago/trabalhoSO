#include <iostream>
#include <thread>
#include <time.h>

using namespace std;
#define linha 20000
#define coluna 20000

//aloca linhas
int** a = new int* [linha];

int** b = new int* [linha];

int** res = new int* [linha];

///Multi

//matricial
void matricial1() {
    for (int i = 0; i < 5000; i++) {
        for (int j = 0; j < coluna; j++) {
            res[i][j] = a[i][j] * b[j][i];

        }
    }
}

void matricial2() {
    for (int i = 5000; i < 10000; i++) {
        for (int j = 0; j < coluna; j++) {
            res[i][j] = a[i][j] * b[j][i];

        }
    }
}

void matricial3() {
    for (int i = 10000; i < 15000; i++) {
        for (int j = 0; j < coluna; j++) {
            res[i][j] = a[i][j] * b[j][i];

        }
    }
}

void matricial4() {
    for (int i = 15000; i < linha; i++) {
        for (int j = 0; j < coluna; j++) {
            res[i][j] = a[i][j] * b[j][i];

        }
    }
}

//posicional
void posicional1() {
    for (int i = 0; i < 5000; i++) {
        for (int j = 0; j < coluna; j++) {
            res[i][j] = a[i][j] * b[i][j];

        }
    }
}

void posicional2() {
    for (int i = 5000; i < 10000; i++) {
        for (int j = 0; j < coluna; j++) {
            res[i][j] = a[i][j] * b[i][j];

        }
    }
}

void posicional3() {
    for (int i = 10000; i < 15000; i++) {
        for (int j = 0; j < coluna; j++) {
            res[i][j] = a[i][j] * b[i][j];

        }
    }
}

void posicional4() {
    for (int i = 15000; i < linha; i++) {
        for (int j = 0; j < coluna; j++) {
            res[i][j] = a[i][j] * b[i][j];

        }
    }
}


///Single

//matricial
void munica() {
    for (int i = 0; i < linha; i++) {
        for (int j = 0; j < coluna; j++) {
            res[i][j] = a[i][j] * b[j][i];

        }
    }
}

//posicional
void punica() {
    for (int i = 0; i < linha; i++) {
        for (int j = 0; j < coluna; j++) {
            res[i][j] = a[i][j] * b[i][j];
        }
    }
}
///


void matricial() {
    cout << "::Multiplicacao matricial::" << endl;

    clock_t start, end;
    double tempom;
    double tempos;

    //Multithread
    start = clock();
    //
    thread t1(matricial1);
    thread t2(matricial2);
    thread t3(matricial3);
    thread t4(matricial4);
    t1.join();
    t2.join();
    t3.join();
    t4.join();
    //
    end = clock();

    tempom = ((double)(end - start)) / CLOCKS_PER_SEC;

    //Singlethread
    start = clock();
    //
    munica();
    //
    end = clock();

    tempos = ((double)(end - start)) / CLOCKS_PER_SEC;

    cout << "Processo multithread demorou " << tempom << "segundos" << endl;
    cout << "Processo singlethread demorou " << tempos << "segundos" << endl;

}

void posicional() {
    cout << "::Multiplicacao posicional::" << endl;

    clock_t start, end;
    double tempom;
    double tempos;

    //Multithread
    start = clock();
    //
    thread t1(posicional1);
    thread t2(posicional2);
    thread t3(posicional3);
    thread t4(posicional4);
    t1.join();
    t2.join();
    t3.join();
    t4.join();
    //
    end = clock();

    tempom = ((double)(end - start)) / CLOCKS_PER_SEC;

    //Singlethread
    start = clock();
    //
    punica();
    //
    end = clock();

    tempos = ((double)(end - start)) / CLOCKS_PER_SEC;

    cout << "Processo multithread demorou " << tempom << "segundos" << endl;
    cout << "Processo singlethread demorou " << tempos << "segundos" << endl;

}

void criar() {
    srand((unsigned)time(NULL));

    for (int i = 0; i < linha/3; i++) {
        for (int j = 0; j < coluna/3; j++) {
            /*a[i][j] = NULL;
            b[i][j] = NULL;*/
            a[i][j] = (rand() % 9) + 1;
            b[i][j] = (rand() % 9) + 1;
        }
    }
    cout << ". . ." << endl;
}
void criar2() {
    srand((unsigned)time(NULL));

    for (int i = linha/3; i < (linha/3)*2; i++) {
        for (int j = coluna/3; j < (coluna/3)*2; j++) {
            /*a[i][j] = NULL;
            b[i][j] = NULL;*/
            a[i][j] = (rand() % 9) + 1;
            b[i][j] = (rand() % 9) + 1;
        }
    }
    cout << ". . ." << endl;
}
void criar3() {
    srand((unsigned)time(NULL));

    for (int i = (linha/3)*2; i < linha; i++) {
        for (int j = (coluna/3)*2; j < coluna; j++) {
            /*a[i][j] = NULL;
            b[i][j] = NULL;*/
            a[i][j] = (rand() % 9) + 1;
            b[i][j] = (rand() % 9) + 1;
        }
    }
    cout << ". . ." << endl;
}

void c() {
    cout << "* Matriz 20.000x20.000 *" << endl;

    //clock_t start, end;
    //double tempo;
    //start = clock();
    thread c1(criar);
    thread c2(criar2);
    thread c3(criar3);
    c1.join();
    c2.join();
    c3.join(); 
    //end = clock();
    //tempo = ((double)(end - start)) / CLOCKS_PER_SEC;
    //cout << "preencher as matrizes com multithread levou " << tempo << " segundos" << endl;
}

int main()
{
    //aloca colunas
    for (int i = 0; i < linha; i++)
    {
        a[i] = new int[coluna];
        b[i] = new int[coluna];
        res[i] = new int[coluna];
    }

    //preenche matrizes
    c();

    //resultados
    matricial();
    cout << endl;
    posicional();

    return 0;
}